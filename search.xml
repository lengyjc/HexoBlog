<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo博客搭建与美化整理</title>
    <url>/2020/09/27/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%BE%8E%E5%8C%96%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="NPM安装"><a href="#NPM安装" class="headerlink" title="NPM安装"></a>NPM安装</h2><p>从<a href="https://nodejs.org/en/">官网</a>下载安装包，更换安装目录，一路下一步，参考<a href="https://www.cnblogs.com/jianguo221/p/11487532.html">教程</a></p>
<h2 id="NPM优化"><a href="#NPM优化" class="headerlink" title="NPM优化"></a>NPM优化</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改npm 全局保存目录</span></span><br><span class="line">npm config set cache &quot;D:\Program Files\npm-cache&quot;</span><br><span class="line">npm config set prefix &quot;D:\Program Files\npm_global&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改npm源地址</span></span><br><span class="line">npm config set registry http://registry.npm.taobao.org/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消代理 如果下载卡住的话</span></span><br><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure>

<h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p>从<a href="https://git-scm.com/download/win">官网</a>下载git，从链接进入会自动开始下载，一路next即可，完成后打开cmd 输入git确认是否存在命令，如果不存在需要将目录加入环境变量中</p>
<h1 id="Hexo-环境搭建"><a href="#Hexo-环境搭建" class="headerlink" title="Hexo 环境搭建"></a>Hexo 环境搭建</h1><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g Hexo -S</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入你需要的目录</span></span><br><span class="line">npm init #初始化一个博客环境</span><br><span class="line"><span class="meta">#</span><span class="bash">常用命令</span></span><br><span class="line">npm clean # 清理</span><br><span class="line">npm g # 生成博客</span><br><span class="line">npm s # 本地运行</span><br><span class="line">npm d # 推送到git</span><br></pre></td></tr></table></figure>

<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><p>参考链接<a href="https://www.jianshu.com/p/33bc0a0a6e90">next</a>，个人比较推荐使用butterfly，<a href="https://github.com/jerryc127/hexo-theme-butterfly">官方地址</a>,<a href="https://demo.jerryc.me/">官方教程</a>,<a href="https://blog.csdn.net/weixin_43350051/article/details/104923503">第三方教程</a>大部分操作根据官方教程走即可，没有多少坑，个人搭建过程问题下面列出。</p>
<h1 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h1><h2 id="无法加载文件进行数字签名-无法在当前系统上运行该脚本"><a href="#无法加载文件进行数字签名-无法在当前系统上运行该脚本" class="headerlink" title="无法加载文件进行数字签名,无法在当前系统上运行该脚本"></a>无法加载文件进行数字签名,无法在当前系统上运行该脚本</h2><p>根据下列步骤处理即可：<a href="https://www.jianshu.com/p/3161c366ccae">解决方案出处</a></p>
<ul>
<li>window键 打开window菜单点击小齿轮</li>
<li>选择更新与安全</li>
<li>选择开发者选项 找到 PowerShell,当时你绿的, 选择应用</li>
<li>重启命令行</li>
</ul>
<p><img src="https://i.loli.net/2020/09/29/6Zu2wQ83NpLx7j4.png" alt="image-20200929224539363"></p>
<h2 id="hexo-部署到-github-上，css、js-文件加载不出来怎么办"><a href="#hexo-部署到-github-上，css、js-文件加载不出来怎么办" class="headerlink" title="hexo 部署到 github 上，css、js 文件加载不出来怎么办"></a>hexo 部署到 github 上，css、js 文件加载不出来怎么办</h2><ul>
<li>修改hexo博客根目录下_config.yml文件</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span> <span class="comment"># 根据域名配置</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog/</span> <span class="comment"># 根据域名配置 如果是github源域名则配置项目名称 前后斜杠不能少</span></span><br></pre></td></tr></table></figure>

<ul>
<li>重新上传</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="hexo-YAMLException-can-not-read-a-block-mapping-entry"><a href="#hexo-YAMLException-can-not-read-a-block-mapping-entry" class="headerlink" title="hexo YAMLException: can not read a block mapping entry;"></a>hexo YAMLException: can not read a block mapping entry;</h2><p>问题原因： yml 文件配置有误，大概率是： 后面没有加空格  推荐使用在线yaml格式检测<a href="http://www.bejson.com/validators/yaml_editor/">地址</a> </p>
<h2 id="hexo-s-启动服务出现-No-Layout"><a href="#hexo-s-启动服务出现-No-Layout" class="headerlink" title="hexo s 启动服务出现 No Layout"></a>hexo s 启动服务出现 No Layout</h2><p>检查主题目录下 对应主题文件夹下是否存在主题文件，如果不存在需要克隆一份</p>
<h1 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h1><h2 id="同时部署多个站点"><a href="#同时部署多个站点" class="headerlink" title="同时部署多个站点"></a>同时部署多个站点</h2><p>此处可以采用多种方式处理</p>
<ul>
<li>采用hexo插件</li>
<li>采用github action</li>
</ul>
<h2 id="自定义域名变更"><a href="#自定义域名变更" class="headerlink" title="自定义域名变更"></a>自定义域名变更</h2><h2 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h2><h2 id="多电脑使用博客"><a href="#多电脑使用博客" class="headerlink" title="多电脑使用博客"></a>多电脑使用博客</h2>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos控制台使用(热加载)</title>
    <url>/2020/09/27/Nacos%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BD%BF%E7%94%A8(%E7%83%AD%E5%8A%A0%E8%BD%BD)/</url>
    <content><![CDATA[<h2 id="Nacos控制台使用（热加载）"><a href="#Nacos控制台使用（热加载）" class="headerlink" title="Nacos控制台使用（热加载）"></a>Nacos控制台使用（热加载）</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在NetCore控制台Or类库中使用依赖注入并热更新，即每次在发布配置后运行的服务或者控制台程序可以在秒级更新配置信息</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>Nacos 魔改版本<ul>
<li>下载nacos 阿里0.5.0版本</li>
<li>修改了AddNacosConfiguration Action的重载，避免获取配置报错</li>
<li>对GetConfig 方法增加了解密功能</li>
</ul>
</li>
<li>Core 3.1 控制台程序</li>
</ul>
<h3 id="核心代码编写"><a href="#核心代码编写" class="headerlink" title="核心代码编写"></a>核心代码编写</h3><ol>
<li><p>默认的控制台是没有依赖注入的，所以我们需要自己写一个简单的依赖注入引擎</p>
<p>简单的实现代码如下</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">InjectEngineCore</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IServiceProvider serviceProvider;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IServiceCollection services = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">Action&lt;IServiceCollection&gt; action, NacosConfigOption option = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            action(services);</span><br><span class="line">            serviceProvider = services.BuildServiceProvider();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Resolve</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span>) <span class="keyword">where</span> T : class</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> serviceProvider.GetService&lt;T&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NacosConfigOption</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> JsonName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;appsettings.json&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> ConfigSectionName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;NacosConfig&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在我们有了一个十分简单的依赖注入的类库了（别忘记添加引用）</p>
</li>
<li><p>接下来开始实现最重要的Nacos注入，首先先上完整代码</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ConfigCenterInject</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InjectConfigCenter</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> IServiceCollection service, NacosConfigOption option = <span class="literal">null</span></span>) <span class="keyword">where</span> T : class</span></span><br><span class="line"><span class="function"></span>		&#123;</span><br><span class="line">			System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);</span><br><span class="line">			<span class="keyword">if</span> (option == <span class="literal">null</span>) option = <span class="keyword">new</span> NacosConfigOption();</span><br><span class="line">			<span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">			   .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">			   .AddJsonFile(option.JsonName, optional: <span class="literal">true</span>, reloadOnChange: <span class="literal">true</span>)</span><br><span class="line">			   .AddEnvironmentVariables();</span><br><span class="line">			IConfigurationRoot configuration = builder.Build();</span><br><span class="line">			<span class="keyword">var</span> settings = configuration.GetSection(option.ConfigSectionName).Get&lt;List&lt;ConfigSetting&gt;&gt;();</span><br><span class="line">			settings.ForEach(x =&gt;</span><br><span class="line">			&#123;</span><br><span class="line">				x.Groups.ForEach(g =&gt;</span><br><span class="line">				&#123;</span><br><span class="line">					g.DataIds.ForEach(d =&gt;</span><br><span class="line">					&#123;</span><br><span class="line">						builder.AddNacosConfiguration(n =&gt;</span><br><span class="line">						&#123;</span><br><span class="line">							n.Optional = <span class="literal">true</span>;</span><br><span class="line">							n.DataId = d.Trim();</span><br><span class="line">							n.Group = g.Group.Trim();</span><br><span class="line">							n.Tenant = x.Tenant.Trim();</span><br><span class="line">							n.UserName = x.UserName.Trim();</span><br><span class="line">							n.Password = x.Password.Trim();</span><br><span class="line">							n.ServerAddresses = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;() &#123; x.Url &#125;;</span><br><span class="line">						&#125;);</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;);</span><br><span class="line">			configuration = builder.Build();<span class="comment">//更新提供者</span></span><br><span class="line">											<span class="comment">//单例注入配置</span></span><br><span class="line">											<span class="comment">//service.AddSingleton&lt;IConfiguration&gt;(configuration);</span></span><br><span class="line">			service.Configure&lt;T&gt;(configuration);</span><br><span class="line">			configuration.Reload();<span class="comment">//强制开启配置刷新</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>简单对代码进行一番解释：</p>
<ul>
<li>首先对传入的配置文件进行读取操作</li>
<li>根据json文件结构进行Nacos Configration Provider 注入操作</li>
<li>最后进行实体类的构建</li>
<li>核心在于最后Reload 只需要执行一次 后续会在每个Provider有更新时都进行更新</li>
</ul>
</li>
<li><p>补上上文缺失的配置结构</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;NacosConfig&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Url&quot;</span>: <span class="string">&quot;http://192.168.1.1:8848&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UserName&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Password&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Tenant&quot;</span>: <span class="string">&quot;此处填你的命名空间guid值&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Groups&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Group&quot;</span>: <span class="string">&quot;DEFAULT_GROUP&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DataIds&quot;</span>: [ <span class="string">&quot;testDB&quot;</span>, <span class="string">&quot;testConfig&quot;</span> ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
</li>
<li><p>在控制台使用</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Engines.InjectEngineCore.Init(c =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                c.AddAutoMapper(<span class="keyword">typeof</span>(MapperProfiles).Assembly);</span><br><span class="line">                c.InjectConfigCenter&lt;ConfigTest&gt;();</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">var</span> bb = Engines.InjectEngineCore.Resolve&lt;IOptionsMonitor&lt;ConfigTest&gt;&gt;().CurrentValue.userName;</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConfigTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> userName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>同样的在使用上也相当简单</p>
<ul>
<li>在Main最开头的地方执行一次Init,并传入需要注入的服务,Automap功能本次不提</li>
<li>注入咱们的Congig之后后面就可以通过Resolve获取IOptionsMonitor 实体类来访问所需要的配置了</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>功能并没有多么难，甚至还有些简单，最坑的点在于需要手动再开启一次Reload，调试找这个问题确实花了一段时间，目前还在使用中，本机测试约20秒从局域网测试环境同步到本机电脑，测试已通过，具体效果还在观察，本内容网上确实没有多少相关资料，整理后放于此，如果有更好的做法，欢迎分享。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Nacos</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
        <tag>.Net Core</tag>
        <tag>依赖注入</tag>
      </tags>
  </entry>
  <entry>
    <title>.Net Core查漏补缺</title>
    <url>/2020/09/24/NetCore%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
    <content><![CDATA[<h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>.Net Core作为Net系技术的一个大趋势，在现在这个竞争条件下已经是基础技能之一，不会.Net Core的已经基本上可以说落后于潮流了，本次主要目的就是为了给大家给.Net Core知识进行查漏补缺并以此来讲解目前后台框架的开发使用。</p>
<p><img src="https://i.loli.net/2020/09/26/JD2akpt5GXAWu4L.jpg" alt="111"></p>
<h2 id="Net-Core-是什么"><a href="#Net-Core-是什么" class="headerlink" title=".Net Core 是什么"></a>.Net Core 是什么</h2><p>.Net Core由4个支柱项目构成<strong>CoreCLR</strong>、<strong>CoreFx</strong>、<strong>CLI</strong>、<strong>Rolsyn</strong></p>
<ul>
<li>CoreCLR : .NetCore公共语言运行时，是由C++编写的。</li>
<li>CoreFX：Framework 的CLR演化而来，与CLR结构一致,完全由C#编写，CLR使用JIT解析代码，提供异常处理机制，不同平台的线程处理，GC。</li>
<li>CLI：通用中间语言，公开的技术标准，定义了一个不依赖于具体操作系统与硬件架构的中间语言（IL），以及执行这个语言所需的运行环境。</li>
<li>Rolsyn：.NET上的高级语言编译器，C#、VB.NET\F#，微软眼中的下一代编译平台。</li>
</ul>
<p>所以说C#代码写到一定境界就必然会要求去搞懂C++,真正最高性能的部分还是在C++。</p>
<p>以下将NetCore简称为Core。</p>
<p>FrameWork版本迁移Core工具：</p>
<ul>
<li><strong>.NET Portability Analyzer</strong> .NET迁移分析工具，分析项目的源代码，并且生成分析报告</li>
<li>参考学习链接<a href="https://docs.microsoft.com/en-us/dotnet/standard/analyzers/portability-analyzer">微软官方</a>，<a href="https://www.cnblogs.com/qtiger/p/13029562.html">博客</a>,<a href="https://www.cnblogs.com/shanyou/archive/2014/12/07/4149637.html">张善友博客</a></li>
</ul>
<p>Core源码仓库地址:<a href="https://github.com/dotnet">源码仓库</a>,<a href="https://github.com/dotnet/runtime">runtime</a></p>
<h1 id="Net-Core基础使用"><a href="#Net-Core基础使用" class="headerlink" title=".Net Core基础使用"></a>.Net Core基础使用</h1><h2 id="WinDbg基本调试"><a href="#WinDbg基本调试" class="headerlink" title="WinDbg基本调试"></a>WinDbg基本调试</h2><ul>
<li>工具： windbg 分为2个版本传统版和预览版 区别在于界面</li>
<li>术语： dmp可以理解为内存状态快照，pdb 程序数据库文件，Symbol 数据信息符号文件包含exe的调试信息</li>
<li>下载：<a href="https://dl.pconline.com.cn/download/770876.html">地址</a>,<a href="https://docs.microsoft.com/zh-cn/windows-hardware/drivers/debugger/debugger-download-tools">官网下载</a></li>
<li>好处：可获取linux下获取已部署出去的现场环境来进行调试排查疑难问题</li>
</ul>
<h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><p>检查程序安装列表中是否有<img src="https://i.loli.net/2020/09/23/biglxWJVU4y9MYA.png" alt="image-20200923212537938"></p>
<p>如果已存在那么不需要再去下载独立安装包，如果不存在需要去上述下载地址下载安装</p>
<p>在刚刚程序中点击修改 然后在修改界面中选择安装如图所示的功能</p>
<p><img src="https://i.loli.net/2020/09/23/tHcyMUXV8wg6hDO.png" alt="image-20200923212648889"></p>
<p>此版本为传统版本</p>
<h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><h4 id="安装-Net-Core-dbg调试插件-SOS"><a href="#安装-Net-Core-dbg调试插件-SOS" class="headerlink" title="安装.Net Core dbg调试插件 SOS"></a>安装.Net Core dbg调试插件 SOS</h4><p>windbg是一个空壳，所以我们要使用sos(son of strike)调试插件</p>
<ul>
<li><p>方式一：</p>
<p>从<a href="https://github.com/dotnet/diagnostics">官方</a>下载源码 点击restore.bat然后再点击build.cmd </p>
<p>然后就可以再如下目录中找到sos.dll文件</p>
<p><img src="https://i.loli.net/2020/09/23/ES9hNVWqLeTygdH.png" alt="image-20200923214438036"></p>
</li>
<li><p>方式二：</p>
<p>如果你不想去下载源码，还可以用第二个方式</p>
<p>在电脑环境变量中配置windbg的目录 （如果不是windows商店安装的话）</p>
<p>进入我们测试的项目bin目录打开cmd</p>
<p>输入命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">windbg dotnet .\TestWindbg</span><br><span class="line">工具名             项目名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式三</p>
<p>可以在命令行工具cmd中安装sos</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet tool install -g dotnet-sos</span><br><span class="line">dotnet-sos install</span><br></pre></td></tr></table></figure>

<p>第一行为安装安装工具</p>
<p>第二行为安装sos</p>
</li>
<li><p>加载sos.dll</p>
<p>在指令中输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.load .load C:\Windows\Microsoft.NET\Framework64\v4.0.30319\SOS.dll</span><br></pre></td></tr></table></figure>

<p>ps:注意如果32位打开的windbg要用对应32位的路径 路径不同人可能不同 请选择自己合适的路径 </p>
<p>地址可以通过everything搜索得到</p>
<p>参考链接 <a href="https://www.cnblogs.com/faron/articles/4360962.html">32位程序错误</a></p>
</li>
</ul>
<h4 id="简单的调试"><a href="#简单的调试" class="headerlink" title="简单的调试"></a>简单的调试</h4><p>输入指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sxe ld coreclr</span><br></pre></td></tr></table></figure>

<p>其中sxe 表示设置事件触发，ld为load的缩写 表示加载，整句话表示在加载coreclr时候中断</p>
<p>接下来点击g 让程序向下跑 （如果没有设置断点 程序会一直跑）</p>
<p>输入指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.chain</span><br></pre></td></tr></table></figure>

<p>可以显示加载的调试器信息</p>
<p>输入指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!bpmd TestWindbg.dll TestWindbg.Program.Main</span><br></pre></td></tr></table></figure>

<p>!bpmd 为sos提供的指令用来增加断点 有2个参数 dll 名称和方法名称全称</p>
<p>继续按g执行可以看到如图所示停在第一个断点上</p>
<p><img src="https://i.loli.net/2020/09/23/vopzI4qDQRi6KjU.png" alt="image-20200923223651821"></p>
<p>更多的指令可以参考<a href="https://www.cnblogs.com/kekec/archive/2012/12/02/2798020.html">博客</a> 或者自行百度，谷歌搜索</p>
<h4 id="创建dmp文件"><a href="#创建dmp文件" class="headerlink" title="创建dmp文件"></a>创建dmp文件</h4><ol>
<li><p>下载ProcDump <a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump">下载</a></p>
</li>
<li><p>使用自带工具D:\Windows Kits\10\Debuggers\x86下的adplus.exe工具抓取 运行后可以在帮助文档中查看命令</p>
</li>
<li><p><img src="https://i.loli.net/2020/09/23/YIQnZthMl6cwako.png" alt="image-20200923224422276"></p>
</li>
<li><p>使用命令</p>
</li>
<li><pre><code class="shell">procdump -ma -c 50 -s 3 -n 2 5844(Process Name or PID)
    -ma 生成full dump, 即包括进程的所有内存. 默认的dump格式包括线程和句柄信息.
    -c 在CPU使用率到达这个阀值的时候, 生成dump文件.
    -s CPU阀值必须持续多少秒才抓取dump文件.
    -n 在该工具退出之前要抓取多少个dump文件.
    上面的命令行会监控w3wp.exe的CPU, 在CPU使用率超过百分之五十超过3秒的时候, 生成dump文件, 重复该动作两次.
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- linux用lldb抓取dump文件</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96; shell</span><br><span class="line"> ulimit -c # 如果返回0 则为不允许抓取转储文件</span><br><span class="line"> ulimit -c unlimited #解除限制</span><br><span class="line"> dotnet tool install -g dotnet-sos</span><br><span class="line"> dotnet-sos install # 需要用shell登录安装这个命令 安装完后需要重启会话 </span><br><span class="line"> # 使用lldb </span><br><span class="line"> #已安装的话</span><br><span class="line"> lldb-6.0#进入lldb界面</span><br><span class="line"> soshelp#查看sos命令</span><br><span class="line"> lldb-6.0 dotnet HelloWorld.dll #进入lldb</span><br><span class="line"> settings set --target.run-args &quot;HelloWorld.dll&quot; #设置运行目标参数</span><br><span class="line"> process launch -s # -s代表在入口点暂停</span><br><span class="line"> process handle -s false SIGUSR1 SIGUSR2 #屏蔽调试不需要的信号</span><br><span class="line"> breakpoint set -n LoadLibrayExw #设置断点 参数为方法名</span><br><span class="line"> breakpoint del 1 #删除序号1断点</span><br><span class="line"> bpmd TestWindbg.dll TestWindbg.Program.Main #也可以做断点 只是没有之前那个的！</span><br><span class="line"> ni 往下走一步</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ol>
<p>   本次示例采用另一种方式生成</p>
<ol>
<li><p>首先以release模式生成程序然后运行</p>
</li>
<li><p>在任务栏找到我们的程序右键创建存储文件</p>
</li>
<li><p><img src="https://i.loli.net/2020/09/23/1sdOPoLUFMaSyXT.png" alt="image-20200923164636833"></p>
</li>
<li><p>文件默认会存储到C:\Users\你的账户名\AppData\Local\Temp\NewYunFaDan.WebAPI.DMP</p>
</li>
<li><p><img src="https://i.loli.net/2020/09/23/Ep64wBuY5NFtXKH.png" alt="image-20200923164549839"></p>
</li>
<li><pre><code class="shell">新建一个环境变量_NT_SYMBOL_PATH 值为: SRV*c:\mysymbol* http://msdl.microsoft.com/download/symbols
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   7. 第六条的意思是所有symbol的都放到c盘mysymbol中 建议改为d盘之类的</span><br><span class="line"></span><br><span class="line">   8. 找到我们的dmp文件双击打开</span><br><span class="line"></span><br><span class="line">   9. 在Settings的Debugging Settings 中设置</span><br><span class="line"></span><br><span class="line">   10. ![image-20200923173202690](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;09&#x2F;23&#x2F;YPXnfuySz1Jxhd9.png)</span><br><span class="line"></span><br><span class="line">   11. 点击分析![image-20200923165013396](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;09&#x2F;23&#x2F;BOfWzXwphM8VECZ.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">总结</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96; shell</span><br><span class="line">#基本命令</span><br><span class="line"># 运行</span><br><span class="line">windbgx dotnet .\ConsoleApp1.dll</span><br><span class="line"># 加载coreclr</span><br><span class="line">sxe ld coreclr</span><br><span class="line"># 继续</span><br><span class="line">g</span><br><span class="line"># 加载SOS</span><br><span class="line">.load C:\Users\aaa\.dotnet\sos\sos.dll</span><br><span class="line"># 查看插件</span><br><span class="line">.chain</span><br><span class="line"># 函数断点</span><br><span class="line">!bpmd ConsoleApp1.dll ConsoleApp1.Program.Main</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
<p>此处附加参考连接：<a href="https://www.cnblogs.com/bluedoctor/p/4813125.html">他人博客</a>，<a href="https://www.cnblogs.com/djian/p/debug-dotnet-with-windbg.html">引用2</a>，<a href="https://www.jqhtml.com/55095.html">调试docker下的dmp</a>，<a href="https://blog.csdn.net/keidoekd2345/article/details/50125747/">直接调试</a></p>
<hr>
<h2 id="Linq拓展"><a href="#Linq拓展" class="headerlink" title="Linq拓展"></a>Linq拓展</h2><ul>
<li><p>使用聚合linq查询</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加模型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Model</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Count &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//增加扩展方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">LinqExtenion</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取集合最小值</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TSouce&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TCompareValue&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;source&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;comparerExpression&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TSouce <span class="title">MinItem</span>&lt;<span class="title">TSouce</span>, <span class="title">TCompareValue</span>&gt;(<span class="params"><span class="keyword">this</span> IEnumerable&lt;TSouce&gt; source,</span></span></span><br><span class="line"><span class="function"><span class="params">          Func&lt;TSouce, TCompareValue&gt; comparerExpression</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> comparer = Comparer&lt;TCompareValue&gt;.Default;</span><br><span class="line">            <span class="keyword">return</span> source.Aggregate((minValue, item) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> result = comparer.Compare(comparerExpression(minValue), comparerExpression(item));</span><br><span class="line">                <span class="keyword">return</span> result &lt; <span class="number">0</span> ? minValue : item;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">models1.MinItem(x =&gt; x.Count);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>并行化</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> query1 = (<span class="keyword">from</span> n <span class="keyword">in</span> models2.AsParallel()</span><br><span class="line">                          <span class="keyword">where</span> n.Count &gt; <span class="number">18</span> </span><br><span class="line">                          <span class="keyword">select</span> n).ToList();</span><br></pre></td></tr></table></figure>
</li>
<li><p>词频统计</p>
<p><img src="https://i.loli.net/2020/09/23/Xkp6nL5QmCvzWdc.png" alt="image-20200923231855893"></p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> words = File.ReadAllText(<span class="string">&quot;Data.txt&quot;</span>).Split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">           <span class="keyword">var</span> map = words.AsParallel().ToLookup(p =&gt; p, k =&gt; <span class="number">1</span>);</span><br><span class="line">           <span class="keyword">var</span> reduce = <span class="keyword">from</span> IGrouping&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt; wordMap <span class="keyword">in</span> map.AsParallel()</span><br><span class="line">               <span class="keyword">where</span> wordMap.Count() &gt; <span class="number">1</span></span><br><span class="line">               <span class="keyword">select</span> <span class="keyword">new</span> &#123;Word = wordMap.Key, Count = wordMap.Count()&#125;;</span><br><span class="line">  </span><br><span class="line">           <span class="keyword">foreach</span> (<span class="keyword">var</span> word <span class="keyword">in</span> reduce)</span><br><span class="line">           &#123;</span><br><span class="line">               Console.WriteLine(<span class="string">$&quot;Word: <span class="subst">&#123;word.Word&#125;</span>,Count:<span class="subst">&#123;word.Count&#125;</span>&quot;</span>);</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="IO处理"><a href="#IO处理" class="headerlink" title="IO处理"></a>IO处理</h2><h4 id="字符串切分"><a href="#字符串切分" class="headerlink" title="字符串切分"></a>字符串切分</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> str = <span class="string">&quot;Times:10086&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> strSpan = str.AsSpan();</span><br><span class="line">        <span class="keyword">var</span> sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">        sw.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>.Parse(strSpan.Slice(<span class="number">6</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        sw.Stop();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;耗时&quot;</span> + sw.ElapsedMilliseconds);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        sw.Restart();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>.Parse(str.Substring(<span class="number">6</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        sw.Stop();</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;耗时&quot;</span> + sw.ElapsedMilliseconds);</span><br><span class="line">sw.Restart();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>.Parse(str[<span class="number">6.</span>.]);</span><br><span class="line">        &#125;</span><br><span class="line">        sw.Stop();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;耗时&quot;</span> + sw.ElapsedMilliseconds);</span><br></pre></td></tr></table></figure>

<h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源文件</span></span><br><span class="line">         <span class="keyword">using</span> <span class="keyword">var</span> originalFileStream = File.OpenRead(<span class="string">&quot;data.txt&quot;</span>);</span><br><span class="line">         <span class="comment">// 目标压缩文件</span></span><br><span class="line">         <span class="keyword">using</span> <span class="keyword">var</span> compressedFileStream = File.Create(<span class="string">&quot;data.gz&quot;</span>);</span><br><span class="line">         <span class="comment">// 创建压缩流对象</span></span><br><span class="line">         <span class="keyword">using</span> <span class="keyword">var</span> compressionStream = <span class="keyword">new</span> GZipStream(compressedFileStream, </span><br><span class="line">             CompressionMode.Compress);</span><br><span class="line">         <span class="comment">// 源文件内容写入压缩流</span></span><br><span class="line">       originalFileStream.CopyTo(compressionStream);</span><br></pre></td></tr></table></figure>




</li>
</ul>
<hr>
<h2 id="Core-多线程与异步"><a href="#Core-多线程与异步" class="headerlink" title="Core 多线程与异步"></a>Core 多线程与异步</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li><p>原生线程 ：操作系统负责管理</p>
</li>
<li><p>托管线程：基于原生线程，由.NET管理的线程（如Thread对象）</p>
</li>
<li><p>线程切换：主动切换，被动切换</p>
</li>
<li><p>主动切换： 线程对应的任务主动要求暂停线程的运行</p>
</li>
<li><p>被动切换：程序运行超过一段时间后被强制切换，抢占，最大时间即为时间片</p>
</li>
<li><p>上下文：保存某个时间点上的CPU中各个寄存器的值的数据结构</p>
</li>
<li><p>上下文切换：</p>
<p><img src="https://i.loli.net/2020/09/24/xP3B4hFcuseQv5E.png" alt="image-20200924125537211"></p>
<ul>
<li><p>线程调度：</p>
<p><img src="https://i.loli.net/2020/09/24/ZYb6fk1tnLAEyve.png" alt="image-20200924125719550"></p>
<ul>
<li><p>托管线程有两种模式：抢占模式（不能访问托管堆上的对象）、合作模式（可以自由的访问托管堆上的对象）</p>
</li>
<li><p>托管线程数据结构：线程本地存储，托管函数，非托管函数的切换记录，分配上下文，执行上下文，同步上下文</p>
</li>
<li><p>锁：</p>
<ul>
<li><p>无锁算法：不使用线程锁，通过修改操作的内容使它们满足原子操作的条件,如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">System.Collections.Consurrent.CurrentBag</span><br><span class="line">System.Collections.Consurrent.CurrentDictionary&lt;TKey, TValue&gt;</span><br><span class="line">System.Collections.Consurrent.CurrentQueue</span><br><span class="line">System.Collections.Consurrent.CurrentStack</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程锁：有获取锁（Acquire）和释放锁（Release）两个操作，在获取锁之后和释放锁之前进行的操作保证在同一个时间只有一个线程执行，操作内容无需改变，所以线程锁具有很强的通用性</p>
<ul>
<li>自旋锁：当一个线程在获取锁对象的时候，如果锁被其它线程获取，那么这个线程<br>会循环等待，然后不断的判断锁是否能够成功获取，直到获取到锁才会退出循环。</li>
<li>Mutex互斥锁：适用于一个共享资源每次只能被一个线程访问的情况。</li>
<li>混合锁：重试一定的次数，超过一定次数后再安排当前的线程进入等待状态,Monitor即lock</li>
<li>信号量：生产消费者模式,常用于限制最大同时访问次数</li>
<li>读写锁：读取锁是可以被多个线程同时获取，写入锁不可以被多个线程同时获取，适用于频繁读取且读取需要一定时间的场景</li>
</ul>
<p>各个锁的写法直接参考如下地址：</p>
<p><a href="https://www.jb51.net/article/63821.htm">自旋锁</a>,<a href="https://www.cnblogs.com/nele/p/5534580.html">互斥锁</a>,<a href="https://www.cnblogs.com/lucifer1982/archive/2008/12/07/1349437.html">读写锁</a>,<a href="https://www.cnblogs.com/tcjiaan/p/4732225.html">信号量</a></p>
</li>
</ul>
</li>
<li><p>概念区分：</p>
<ul>
<li>async和await异步:使用异步是为了不创建大量线程，有限的线程执行大量的操作</li>
<li>多线程：通过多个线程同时处理来提高性能</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>参考链接：<a href="https://www.cnblogs.com/chenwolong/p/await.html">async和await</a></p>
<hr>
<h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul>
<li><p>栈空间和堆空间：</p>
<ul>
<li>分配：为数据申请内存空间的操作</li>
<li>释放：释放申请的内存空间的操作</li>
<li>栈空间：每个线程都具有独立的栈空间，用于保存调用函数的数据</li>
<li>堆空间：程序中独立的一块空间，可以被程序的所有函数所访问，不会伴随着函数返回和线程结束的过程释放</li>
</ul>
</li>
<li><p>值类型和引用类型：</p>
<ul>
<li><p>值类型：对象本身存储值</p>
</li>
<li><p>引用类型：对象本身存储内存地址，值存储在地址所指向的地方</p>
</li>
<li><p>存储位置：一般情况下值类型存储在堆栈中，而引用类型存储在托管堆上</p>
<p>但是如果值类型作为引用类型的成员，则作为引用类型的一部分，存储在托管堆上 <a href="https://www.cnblogs.com/xinaixia/p/5767852.html">参考链接</a></p>
</li>
</ul>
</li>
<li><p>GC:垃圾回收机制，自动找出并释放不再使用的内存空间机制</p>
<ul>
<li><p>方式：标记并清除 <a href="https://www.cnblogs.com/qqmomery/p/6614123.html">参考链接</a></p>
<ul>
<li>遍历堆，标记为非活动对象</li>
<li>遍历堆，将未标记对象回收入堆</li>
</ul>
</li>
<li><p>引用类型分代：<a href="https://blog.csdn.net/zhang_hui_cs/article/details/86653202">参考链接</a></p>
<ul>
<li><p>类型：第0代，第1代，第2代</p>
</li>
<li><p>区别：</p>
<ul>
<li>0：存活时间最短</li>
<li>1：存活较长</li>
<li>2：存活最长</li>
</ul>
</li>
<li><p>方式：</p>
<p>第0代满时执行1次GC，存活的进入1代，在GC发现1代满了就对1代进行GC，存活的进入2代，2代满时扩容2代空间</p>
</li>
<li><p>目的：</p>
<ul>
<li>增加单次回收对象数量</li>
<li>减少处理需要的时间</li>
</ul>
</li>
</ul>
</li>
<li><p>压缩：</p>
<ul>
<li><p>碎片空间：反复执行分配与回收操作，可能导致堆上产生很多空余空间，这些空余空间又被称为碎片空间</p>
</li>
<li><p>产生目的：压缩机制可以通过移动已分配空间把碎片空间合并到一块，使得堆可以分配更大的对象</p>
</li>
<li><p>大小对象：根据引用类型占用空间大小区分，大对象与小对象会在不同的堆区域中分配：大对象堆和小对象堆</p>
</li>
<li><p>限制：移动大对象需要的成本很高，默认只在小对象堆启用，大对象堆是不会执行压缩的</p>
</li>
</ul>
</li>
<li><p>GC STW（stop the world  这全称就问你牛不牛逼哈哈）：</p>
<ul>
<li>概念：让执行GC处理以外的线程全都暂停运行，像这样的停止操作我们称为STW</li>
<li>原因：对象之间的引用关系会随着程序运行不断改变，让执行GC的线程与执行其他处理的线程同时运行会带来一些问题。所以GC会在回收期间停止所有其他线程</li>
</ul>
</li>
<li><p>GC模式：</p>
<ul>
<li>工作站模式：适用于内存占用量小的程序和桌面程序，它可以提供更短的响应时间</li>
<li>服务器模式：适用于内存占用量大的程序与服务程序，可以提供更高的吞吐量</li>
<li><img src="https://i.loli.net/2020/09/24/sq8DjFd1KwpGvAY.png" alt="image-20200924135758724"></li>
<li>普通GC:会导致更长的单次STW停顿时间，但消耗的资源比较小，并且支持压缩处理。</li>
<li>后台GC:每次STW停顿时间会更短，但停顿次数与消耗的资源会更多，并且不支持压缩处理。</li>
<li><img src="https://i.loli.net/2020/09/24/FcEik7Yx21Zw4HO.png" alt="image-20200924135903363"></li>
</ul>
</li>
<li><p>GC流程</p>
<p><img src="https://i.loli.net/2020/09/24/EZeXVsmg8TFOcJv.png" alt="image-20200924140109496"></p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><ul>
<li><p>共享内存</p>
<p>顾名思义就是用内存映射文件来通信，不常用</p>
<p>适用于频繁读写文件的场景，执行效率比io操作高</p>
<p>代码使用示例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> mappedFile = MemoryMappedFile.CreateOrOpen(<span class="string">&quot;test&quot;</span>, <span class="number">1024</span>, MemoryMappedFileAccess.ReadWrite);</span><br><span class="line">           <span class="keyword">var</span> access = mappedFile.CreateViewAccessor(<span class="number">0</span>,<span class="number">1024</span>);</span><br><span class="line">           <span class="keyword">var</span> strLenth = access.ReadInt32(<span class="number">0</span>);<span class="comment">//读取一共有多长</span></span><br><span class="line">           access.ReadArray(<span class="number">4</span>,<span class="keyword">new</span> <span class="keyword">char</span>[strLenth], <span class="number">0</span>, strLenth);<span class="comment">//从第4位开始读放到char[]中从char[]的第0位开始放，一共读取strLenth长度 </span></span><br><span class="line">           access.Write(<span class="number">0</span>, <span class="number">1</span>);<span class="comment">//写</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>httpClient</p>
<p><img src="https://i.loli.net/2020/09/24/TdC7m3Zwycnj91G.png" alt="image-20200924124423404"></p>
</li>
</ul>
</li>
<li><p>socket</p>
<p>内容过多仅提供参考地址 感兴趣的去了解了解</p>
<p><a href="https://www.cnblogs.com/sheseido/p/11617993.html">原理</a></p>
</li>
</ul>
<h1 id="Net-Core-应用"><a href="#Net-Core-应用" class="headerlink" title="Net Core 应用"></a>Net Core 应用</h1><h2 id="Nuget包管理"><a href="#Nuget包管理" class="headerlink" title="Nuget包管理"></a>Nuget包管理</h2><p> 不同于以前的拷贝dll方式，微软集成了nuget包作为类库管理器，可以使用官方包也可以自己搭建私有仓库</p>
<p>VS2019默认就有，安装方式略</p>
<ul>
<li><p>使用： </p>
<ol>
<li>右键项目依赖项–&gt; 管理Nuget服务包</li>
<li>右上方菜单栏–&gt; Nuget包管理器–&gt;程序包管理控制台</li>
</ol>
</li>
<li><p>建议新使用直接使用界面操作即可</p>
</li>
<li><p>添加私有仓库</p>
<p><img src="https://i.loli.net/2020/09/24/cjpTWkfxDBt7m6o.png" alt="image-20200924150323173"></p>
<ol>
<li>点击上图所示齿轮</li>
<li>点击弹出框绿色的+号</li>
<li>输入你喜欢的名字和仓库地址点击更新</li>
<li>确认保存</li>
<li>在程序包源处可以切换 如果需要输入账号密码默认会弹出需要账号密码的框</li>
<li>搜索你想要的包 选择版本安装即可</li>
</ol>
</li>
</ul>
<hr>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><ul>
<li><p>什么是依赖注入</p>
<ul>
<li>组件之间的依赖关系由容器在运行期决定，形象的来说，即由容器动态的将某种依赖关系注入到组件之中（不知道从哪里抄来的定义）</li>
<li>通俗来说就是本来我要一个对象需要自己去new出来，比如说new个对象~，现在改了我不自己动手而是我指定一个需求（接口）让别人（容器）来帮我做（提供实例）</li>
<li>Net Core 和Framework 开发写法大的区别就是Core的写法都是基于服务式，更有SOA的思维</li>
<li>原则：<ul>
<li>Hollywood原则(“Don’t call me, I’ll call you”，即，请不要调用我，我将调用你)</li>
<li>依赖倒置原则：依赖于抽象而不依赖于具体实现</li>
</ul>
</li>
</ul>
</li>
<li><p>实现方式</p>
<ul>
<li><p>类型：</p>
<ul>
<li>构造函数注入（netcore默认支持）</li>
<li>属性注入（第三方实现）</li>
<li>字段注入（第三方实现）</li>
</ul>
</li>
<li><p>常用第三方依赖注入：</p>
<ul>
<li>Autofac </li>
<li>Unity</li>
</ul>
</li>
<li><p>实现代码<a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.1#service-lifetimes-and-registration-options">官网参考链接</a> ，<a href="https://blog.csdn.net/chenludaniel/article/details/82378894">各注入写法</a></p>
<ul>
<li><p>构造函数注入</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDependency</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDependency</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">WriteMessage</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(</span><br><span class="line">            <span class="string">$&quot;MyDependency.WriteMessage called. Message: <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IndexModel</span> : <span class="title">PageModel</span></span><br><span class="line">&#123;</span><br><span class="line">    MyDependency _dependency = <span class="keyword">new</span> MyDependency();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">OnGetAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">await</span> _dependency.WriteMessage(</span><br><span class="line">            <span class="string">&quot;IndexModel.OnGetAsync created this message.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IMyDependency</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Task <span class="title">WriteMessage</span>(<span class="params"><span class="keyword">string</span> message</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDependency</span> : <span class="title">IMyDependency</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;MyDependency&gt; _logger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDependency</span>(<span class="params">ILogger&lt;MyDependency&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">WriteMessage</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _logger.LogInformation(</span><br><span class="line">            <span class="string">&quot;MyDependency.WriteMessage called. Message: &#123;Message&#125;&quot;</span>, </span><br><span class="line">            message);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">services.AddSingleton(<span class="keyword">typeof</span>(ILogger&lt;&gt;), <span class="keyword">typeof</span>(Logger&lt;&gt;));</span><br><span class="line">   services.AddScoped&lt;IMyDependency, MyDependency&gt;();</span><br><span class="line">    services.AddTransient&lt;IOperationTransient, Operation&gt;();</span><br><span class="line">    services.AddScoped&lt;IOperationScoped, Operation&gt;();</span><br><span class="line">    services.AddSingleton&lt;IOperationSingleton, Operation&gt;();</span><br><span class="line">    services.AddSingleton&lt;IOperationSingletonInstance&gt;(<span class="keyword">new</span> Operation(Guid.Empty));</span><br></pre></td></tr></table></figure>
</li>
<li><p>生命周期</p>
<ul>
<li>AddScoped 本次请求内同一个实例</li>
<li>AddTransient 每次都新实例</li>
<li>AddSingleton 单例</li>
</ul>
</li>
</ul>
</li>
<li><p>控制台下使用依赖注入</p>
<ul>
<li><p>首先创建一个Core类库项目</p>
</li>
<li><p>引入nuget包<img src="https://i.loli.net/2020/09/24/Is6MS95AwajngrV.png" alt="image-20200924142440336"></p>
</li>
<li><pre><code class="c#">public static class InjectEngineCore
    &#123;
    //服务提供者角色
        private static IServiceProvider serviceProvider;
    //存储注入的服务
        private static IServiceCollection services = new ServiceCollection();
    //注入服务
        public static void Init(Action&lt;IServiceCollection&gt; action)
        &#123;
            action(services);
            //将注入的服务生成到服务提供者中
            serviceProvider = services.BuildServiceProvider();
        &#125;
    //获取服务
        public static T Resolve&lt;T&gt;() where T : class
        &#123;
            return serviceProvider.GetService&lt;T&gt;();
        &#125;
    &#125;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来可以在所有引用了这个类库项目的地方使用了</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96; c#</span><br><span class="line">  Engines.InjectEngineCore.Init(c &#x3D;&gt;</span><br><span class="line">              &#123;</span><br><span class="line">                  c.AddAutoMapper(typeof(MapperProfiles).Assembly);</span><br><span class="line">              &#125;);</span><br><span class="line">             var mapper &#x3D;  Engines.InjectEngineCore.Resolve&lt;IMapper&gt;();&#x2F;&#x2F;使用方式</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p><a href="https://www.cnblogs.com/Wddpct/p/7219205.html">参考链接</a></p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul>
<li><p>NetCore中读取配置文件</p>
<p>在WebApi中Core默认已经注入了appsettings.json，而且是可以动态更新的，所以使用上较为简单</p>
<p>打开Startup文件</p>
<p>默认Core已经帮我们注入了配置文件服务</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; &#125;</span><br></pre></td></tr></table></figure>

<p>所以我们只需要</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Configuration.GetSection(<span class="string">&quot;ConnectionStrings&quot;</span>)</span><br><span class="line">Configuration.GetSection(<span class="string">&quot;ConnectionStrings:defaultConnStr&quot;</span>).Value</span><br></pre></td></tr></table></figure>

<p>当然这样用就不够优雅，毕竟每个地方都需要注入这个配置信息显得咱们不够oop思想</p>
<p>所以接下来我们定义一个类</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HotSetting</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Key1 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>现在依然回到Startup 文件中（你大部分操作都在这个文件）</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">services.Configure&lt;HotSetting&gt;(Configuration.GetSection(<span class="string">&quot;HotSettings&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>之后我们就可以通过构造函数注入获取这个对象的具体内容了</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">IOptionsMonitor&lt;HotSetting&gt; options;<span class="comment">//热更新重新载入最新数据</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Service</span>(<span class="params">IOptionsMonitor&lt;HotSetting&gt; _options</span>)</span> &#123; </span><br><span class="line">            options = _options;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> options.CurrentValue.Key1;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<hr>
<h2 id="日志组件"><a href="#日志组件" class="headerlink" title="日志组件"></a>日志组件</h2><p>有了上面的依赖注入的基础 日志组件就没什么难度了</p>
<ul>
<li><p>首先引入nlog包 NLog.Web.AspNetCore</p>
</li>
<li><p>修改Nlog.config</p>
</li>
<li><pre><code class="scheme">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;nlog xmlns=&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; autoReload=&quot;true&quot; internalLogLevel=&quot;Info&quot;&gt;
    &lt;!-- 启用.net core的核心布局渲染器 --&gt;
    &lt;extensions&gt;
        &lt;add assembly=&quot;NLog.Web.AspNetCore&quot; /&gt;
    &lt;/extensions&gt;
    &lt;!-- 写入日志的目标配置 --&gt;
    &lt;targets&gt;
        &lt;!-- 调试  --&gt;
        &lt;target xsi:type=&quot;File&quot; name=&quot;debug&quot; fileName=&quot;logs/debug-$&#123;shortdate&#125;.log&quot; layout=&quot;$&#123;longdate&#125;|$&#123;event-properties:item=EventId_Id&#125;|$&#123;uppercase:$&#123;level&#125;&#125;|$&#123;logger&#125;|$&#123;message&#125; $&#123;exception:format=tostring&#125;|url: $&#123;aspnet-request-url&#125;|action: $&#123;aspnet-mvc-action&#125;&quot; /&gt;
        &lt;!-- 警告  --&gt;
        &lt;target xsi:type=&quot;File&quot; name=&quot;warn&quot; fileName=&quot;logs/warn-$&#123;shortdate&#125;.log&quot; layout=&quot;$&#123;longdate&#125;|$&#123;event-properties:item=EventId_Id&#125;|$&#123;uppercase:$&#123;level&#125;&#125;|$&#123;logger&#125;|$&#123;message&#125; $&#123;exception:format=tostring&#125;|url: $&#123;aspnet-request-url&#125;|action: $&#123;aspnet-mvc-action&#125;&quot; /&gt;
        &lt;!-- 错误  --&gt;
        &lt;target xsi:type=&quot;File&quot; name=&quot;error&quot; fileName=&quot;logs/error-$&#123;shortdate&#125;.log&quot; layout=&quot;$&#123;longdate&#125;|$&#123;event-properties:item=EventId_Id&#125;|$&#123;uppercase:$&#123;level&#125;&#125;|$&#123;logger&#125;|$&#123;message&#125; $&#123;exception:format=tostring&#125;|url: $&#123;aspnet-request-url&#125;|action: $&#123;aspnet-mvc-action&#125;&quot; /&gt;
    &lt;/targets&gt;
    &lt;!-- 映射规则 --&gt;
    &lt;rules&gt;
        &lt;!-- 调试  --&gt;
        &lt;logger name=&quot;*&quot; minlevel=&quot;Trace&quot; maxlevel=&quot;Debug&quot; writeTo=&quot;debug&quot; /&gt;
        &lt;!--跳过不重要的微软日志--&gt;
        &lt;logger name=&quot;Microsoft.*&quot; maxlevel=&quot;Info&quot; final=&quot;true&quot; /&gt;
        &lt;!-- 警告  --&gt;
        &lt;logger name=&quot;*&quot; minlevel=&quot;Info&quot; maxlevel=&quot;Warn&quot; writeTo=&quot;warn&quot; /&gt;
        &lt;!-- 错误  --&gt;
        &lt;logger name=&quot;*&quot; minlevel=&quot;Error&quot; maxlevel=&quot;Fatal&quot; writeTo=&quot;error&quot; /&gt;
    &lt;/rules&gt;
&lt;/nlog&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 在Program.cs文件中ConfigureWebHostDefaults 后加入</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96; c#</span><br><span class="line">  .UseNLog()</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>依然用构造函数使用即可</p>
</li>
<li><pre><code class="c#"> private readonly ILogger&lt;HomeController&gt; _logger;

    public HomeController(ILogger&lt;HomeController&gt; logger)
    &#123;
        _logger = logger;
    &#125;

    public IActionResult Index()
    &#123;
        _logger.LogInformation(&quot;Index page says hello&quot;);
        return View();
    &#125;

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  当然这个只是基础做法 在我们具体项目中只需要把异常抛出来即可，自然会有相关异常中间件去处理，有关中间件的概念详情见其他章节</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 认证与授权</span><br><span class="line"></span><br><span class="line">- 目的：验证请求API的用户，获取用户相关信息，控制</span><br><span class="line"></span><br><span class="line">- 目前项目中使用JWT作为授权的组件</span><br><span class="line"></span><br><span class="line">- 首先添加 nuget引用 Microsoft.AspNetCore.Authentication.JwtBearer</span><br><span class="line"></span><br><span class="line">- 添加配置参数对象</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96; c#</span><br><span class="line">   public class TokenManagement</span><br><span class="line">      &#123;</span><br><span class="line">          &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">          &#x2F;&#x2F;&#x2F; &#x2F;&#x2F;密钥最小16位</span><br><span class="line">          &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">          [JsonProperty(&quot;secret&quot;)]</span><br><span class="line">          public string Secret &#123; get; set; &#125;</span><br><span class="line">          &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">          &#x2F;&#x2F;&#x2F; 发出者</span><br><span class="line">          &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">          [JsonProperty(&quot;issuer&quot;)]</span><br><span class="line">          public string Issuer &#123; get; set; &#125;</span><br><span class="line">          &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">          &#x2F;&#x2F;&#x2F; 接收者</span><br><span class="line">          &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">          [JsonProperty(&quot;audience&quot;)]</span><br><span class="line">          public string Audience &#123; get; set; &#125;</span><br><span class="line">    </span><br><span class="line">          [JsonProperty(&quot;accessExpiration&quot;)]</span><br><span class="line">          public int AccessExpiration &#123; get; set; &#125;</span><br><span class="line">    </span><br><span class="line">          [JsonProperty(&quot;refreshExpiration&quot;)]</span><br><span class="line">          public int RefreshExpiration &#123; get; set; &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>在startup.cs文件中加入</p>
</li>
<li><pre><code class="c#"> services.Configure&lt;TokenManagement&gt;(configuration.GetSection(&quot;tokenManagement&quot;));
            var token = configuration.GetSection(&quot;tokenManagement&quot;).Get&lt;TokenManagement&gt;();
            services.AddSingleton&lt;JwtService&gt;();
            services.AddAuthentication(x =&gt; &#123;
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            &#125;).AddJwtBearer(x =&gt; &#123;
                x.RequireHttpsMetadata = false;
                x.SaveToken = true;
                x.TokenValidationParameters = new TokenValidationParameters
                &#123;
                    ValidateIssuerSigningKey = true,//验证签名
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(token.Secret)),
                    ValidIssuer = token.Issuer,
                    ValidAudience = token.Audience,
                    ValidateIssuer = false,//不验证是谁发出的
                    ValidateAudience = false//不验证谁拿到的
                &#125;;
            &#125;);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来我们补上JwtService服务</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96; c#</span><br><span class="line">  public class JwtService</span><br><span class="line">      &#123;</span><br><span class="line">          private readonly TokenManagement _tokenManagement;</span><br><span class="line">          public JwtService(IOptions&lt;TokenManagement&gt; options)</span><br><span class="line">          &#123;</span><br><span class="line">              _tokenManagement &#x3D; options.Value;</span><br><span class="line">          &#125;</span><br><span class="line">          &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">          &#x2F;&#x2F;&#x2F; 创建token</span><br><span class="line">          &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">          &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;user&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">          &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;token&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">          &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;</span><br><span class="line">          public bool GenerateToken(UserLoginInfoDTO user, out string token)</span><br><span class="line">          &#123;</span><br><span class="line">              token &#x3D; string.Empty;</span><br><span class="line">  </span><br><span class="line">              &#x2F;&#x2F;增加需要返回的用户信息</span><br><span class="line">              var claims &#x3D; new[]</span><br><span class="line">              &#123;</span><br><span class="line">                  new Claim(ClaimTypes.Name,user.UserName),</span><br><span class="line">                  new Claim(ClaimTypes.MobilePhone,user.Moblie),</span><br><span class="line">                  new Claim(ClaimTypes.Sid,user.Id.ToString()),</span><br><span class="line">                  new Claim(ClaimTypes.PrimarySid,user.BefId.ToString()),</span><br><span class="line">                  new Claim(ClaimTypes.Role,user.UserLevel.ToInt().ToString())</span><br><span class="line">  </span><br><span class="line">              &#125;;</span><br><span class="line">              var key &#x3D; new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_tokenManagement.Secret));</span><br><span class="line">              var credentials &#x3D; new SigningCredentials(key, SecurityAlgorithms.HmacSha256);</span><br><span class="line">              var jwtToken &#x3D; new JwtSecurityToken(_tokenManagement.Issuer, _tokenManagement.Audience, claims, expires: DateTime.Now.AddMinutes(_tokenManagement.AccessExpiration), signingCredentials: credentials);</span><br><span class="line">  </span><br><span class="line">              token &#x3D; new JwtSecurityTokenHandler().WriteToken(jwtToken);</span><br><span class="line">              return true;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>使用在需要授权的方法或者控制器上加上特性</p>
</li>
<li><pre><code class="c#">[Authorize]
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 用户信息存放</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96; c#</span><br><span class="line">  jwtHelper.GenerateToken(res, out string token)</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>用户信息获取</p>
</li>
<li><pre><code class="c#"> public static UserLoginInfoDTO GetUserDto(IEnumerable&lt;Claim&gt; claimInfos)
        &#123;
            var user = new UserLoginInfoDTO();
            //反解析
            var claims = claimInfos.ToList();
            user.UserName = claims[0].Value;
            user.Moblie = claims[1].Value;
            user.Id = claims[2].Value.ToInt();
            user.BefId = claims[3].Value.ToInt();
            user.UserLevel = (TBUser.UserLevelEnum)claims[4].Value.ToInt();
            return user;
         &#125;</code></pre>
</li>
</ul>
<hr>
<h2 id="Core-Api性能压测"><a href="#Core-Api性能压测" class="headerlink" title="Core Api性能压测"></a>Core Api性能压测</h2><ul>
<li>工具： jmeter</li>
<li>目标：希望每个人都能对自己的代码性能如何有所预估</li>
<li>下载：<a href="">百度云地址</a>，提取码: tshi </li>
<li>安装：安装java jdk，设置环境变量，解压jmeter到全英文目录</li>
<li>使用：打开ApacheJMeter.jar或jmeter.bat都行</li>
<li>打开后先别忙着懵逼，我们只需要模拟http请求即可，所以步骤如下：</li>
<li>首先按如图所示创建测试线程组</li>
<li><img src="https://i.loli.net/2020/09/24/3XmhyRdl71Pnxw2.png" alt="image-20200924151901224"></li>
<li>修改为一个好听的名字</li>
<li><img src="https://i.loli.net/2020/09/24/XjEbSHw8okcLJIO.png" alt="image-20200924151958089"></li>
<li>这里就可以控制 同时开启多少个线程目前设置为1</li>
<li>右键点击添加http请求</li>
<li><img src="https://i.loli.net/2020/09/24/bmoT2LZO6ANP4DK.png" alt="image-20200924152052698"></li>
<li>这里就可以添加一些请求地址，请求参数等信息</li>
<li>但是平时我们接口都是有权限的 所以我们还需要增加新的组件</li>
<li><img src="https://i.loli.net/2020/09/24/A5eCyotKzE38Faq.png" alt="image-20200924152344255"></li>
<li>可以看到有很多可选的组件 这里我们选择http信息头管理器</li>
<li>这个时候我们需要看结果报告了，咋办呢</li>
<li><img src="https://i.loli.net/2020/09/24/9R2aZcD8HNJAojm.png" alt="image-20200924152519438"></li>
<li>这里我们添加聚合报告和查看结果树2个组件</li>
<li>结果树可以让我们查看每个请求的返回信息，聚合报告可以让我们查看接口的并发承受情况</li>
<li>一般我们参考聚合报告的90%分位这项指标作为并发吞吐量的依据</li>
</ul>
<hr>
<h2 id="现有框架代码解释"><a href="#现有框架代码解释" class="headerlink" title="现有框架代码解释"></a>现有框架代码解释</h2><p>目前架构图</p>
<p><img src="https://i.loli.net/2020/09/24/AsbSrX6VhGYT1fK.png" alt="image-20200924162334453"></p>
<p>组件：</p>
<ul>
<li>nswag swagger的替代版 功能差不多</li>
<li>jwt token权限验证</li>
<li>singnal 基于socket的通信协议</li>
<li>nlog日志组件</li>
<li>Nacos配置中心组件</li>
<li>automapper 对象转换组件</li>
<li>protobuf-net.Grpc.AspNetCore  Grpc组件</li>
<li>efcore 组件</li>
<li>自定义异常中间件组件</li>
<li>跨域组件</li>
<li>自定义返回模型组件</li>
<li>mysql操作组件</li>
</ul>
]]></content>
      <categories>
        <category>.NetCore</category>
      </categories>
      <tags>
        <tag>.Net Core</tag>
      </tags>
  </entry>
  <entry>
    <title>Sonarqube质量分析部署与使用</title>
    <url>/2020/09/29/Sonarqube%E8%B4%A8%E9%87%8F%E5%88%86%E6%9E%90%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h1><ul>
<li>Linux服务器一台</li>
<li>Shell软件一个 推荐XShell/FinalShell</li>
<li>文件上传工具一个</li>
</ul>
<h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>
<h3 id="Docker-Compose-安装"><a href="#Docker-Compose-安装" class="headerlink" title="Docker Compose 安装"></a>Docker Compose 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.8.0/run.sh &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>以我们需要安装的Sonar为例，流程可以分为如下：</p>
<ol>
<li>创建sonar文件夹</li>
<li>创建docker-compose.yaml文件</li>
<li>将docker-compose.yaml上传到linux服务器</li>
<li>在服务器上执行</li>
</ol>
<p>参考：<a href="https://www.runoob.com/docker/docker-compose.html">菜鸟教程</a></p>
<h1 id="Sonar-安装"><a href="#Sonar-安装" class="headerlink" title="Sonar 安装"></a>Sonar 安装</h1><h2 id="准备docker-compose-yaml文件"><a href="#准备docker-compose-yaml文件" class="headerlink" title="准备docker-compose.yaml文件"></a>准备docker-compose.yaml文件</h2><p>直接上完整文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/postgres/postgresql/:/var/lib/postgresql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/postgres/data/:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">sonar</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sonar:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonarqube</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sonar</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/sonarqube/extensions:/opt/sonarqube/extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/sonarqube/logs:/opt/sonarqube/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/sonarqube/data:/opt/sonarqube/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/sonarqube/conf:/opt/sonarqube/conf</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SONARQUBE_JDBC_USERNAME:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">SONARQUBE_JDBC_PASSWORD:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">SONARQUBE_JDBC_URL:</span> <span class="string">jdbc:postgresql://postgres:5432/sonar</span></span><br></pre></td></tr></table></figure>

<p>默认会下载最新版本</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul>
<li>在linux服务器上新建目录</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir sonar</span><br><span class="line">cd sonar</span><br></pre></td></tr></table></figure>

<ul>
<li>将上述docker-compose.yaml 拷贝到目录中</li>
<li>执行命令 以后台运行的方式启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<ul>
<li>现在可以通过服务器ip：9000去访问了</li>
</ul>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="docker-compose命令不存在"><a href="#docker-compose命令不存在" class="headerlink" title="docker-compose命令不存在"></a>docker-compose命令不存在</h3><p>使用如下下载即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m) -O /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="授权许可被拒绝问题"><a href="#授权许可被拒绝问题" class="headerlink" title="授权许可被拒绝问题"></a>授权许可被拒绝问题</h3><p>附加权限即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>其他问题参考链接：<a href="https://ld246.com/article/1578074168473">部署问题</a></p>
<h1 id="Sonar使用"><a href="#Sonar使用" class="headerlink" title="Sonar使用"></a>Sonar使用</h1><p>默认用户admin密码admin</p>
<h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>登录后在界面安装中文包</p>
<p><img src="https://i.loli.net/2020/09/29/38Ciuf5Ww7HsOQo.png" alt="image-20200929155213585"></p>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>根据表格判断需要安装哪个包，通过git下载包导入</p>
<p><img src="https://i.loli.net/2020/09/29/7vVtCWaoDfbOMNc.png" alt="img"></p>
<p><a href="https://github.com/SonarQubeCommunity/sonar-l10n-zh"><strong>地址</strong></a>,<a href="https://github.com/SonarQubeCommunity/sonar-l10n-zh/releases/latest"><strong>旧版本下载地址</strong></a>,<a href="https://www.cnblogs.com/Mercury-linux/p/12661786.html">参考链接</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载jar</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;SonarQubeCommunity&#x2F;sonar-l10n-zh&#x2F;releases&#x2F;download&#x2F;sonar-l10n-zh-plugin-1.20&#x2F;sonar-l10n-zh-plugin-1.20.jar</span><br><span class="line"></span><br><span class="line">#jar包放入docker目录</span><br><span class="line">docker cp  sonar-l10n-zh-plugin-1.20.jar sonarqube:&#x2F;opt&#x2F;sonarqube&#x2F;extensions&#x2F;plugins&#x2F;</span><br><span class="line">docker restart sonarqube</span><br><span class="line">#查看启动情况</span><br><span class="line">docker logs -f sonarqube</span><br><span class="line">#重新登录网页查看</span><br></pre></td></tr></table></figure>

<h2 id="分析项目"><a href="#分析项目" class="headerlink" title="分析项目"></a>分析项目</h2><h3 id="添加token"><a href="#添加token" class="headerlink" title="添加token"></a>添加token</h3><p>为了分析项目首先我们要给用户创建一个token，进入如图所示页面</p>
<p><img src="https://i.loli.net/2020/09/29/sTDGQmV8EMyNRUe.png" alt="image-20200929155905714"></p>
<p>在生成令牌处填写一个名称 点击生成</p>
<p><strong>注意：</strong>生成的内容不会显示第二次，要注意保存</p>
<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><ul>
<li>在弹出的界面中输入刚才创建的token ，选择使用已有令牌</li>
</ul>
<p><img src="https://i.loli.net/2020/09/29/8pdkasRzm5UW2Qx.png" alt="image-20200929160234754"></p>
<ul>
<li><p>选择项目对应的语言</p>
<p><img src="https://i.loli.net/2020/09/29/XrADLMdv6cB3gGS.png" alt="image-20200929163313606"></p>
</li>
<li><p>点击下载按钮 下载文件 </p>
<p>根据你使用的版本来下载对应的文件，这里我们使用Core 3.x</p>
</li>
</ul>
<p><img src="https://i.loli.net/2020/09/29/EPy6gnFmXDNrbp9.png" alt="image-20200929160844174"></p>
<p>将你下载的文件解压到一个单独的文件夹中然后将文件夹添加入环境变量中</p>
<p>如图所示： 则添加到 sonar-scanner-msbuild-4.10-netcoreapp3.0层</p>
<p><img src="https://i.loli.net/2020/09/29/SXKmTUyI36AdvG7.png" alt="image-20200929162649294"></p>
<ul>
<li><p>使用MSBuild执行SonarQube扫描</p>
<p>复制选择语言那一步的执行代码</p>
<p>可以通过cmd直接执行，也可以通过vs studio 生成事件里执行</p>
<p><strong>选择以cmd 的方式运行</strong></p>
<p>将msbuild路径也放入环境变量中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">X86: C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe</span><br><span class="line">X64: C:\Program Files (x86)\MSBuild\14.0\Bin\amd64\MSBuild.exe</span><br></pre></td></tr></table></figure>

<p>cmd 进入项目所在目录中</p>
<p>执行代码即可</p>
<p><strong>选择Vs运行</strong></p>
<p>在生成事件中填入</p>
<p><img src="https://i.loli.net/2020/09/29/oKLbCuAj6eV4qfv.png" alt="image-20200929171543585"></p>
</li>
</ul>
<p>在这里我们发现安装提示的命令输入无法执行，查阅<a href="https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-msbuild/">文档</a>可知:</p>
<p>修改SonarQube.Analysis.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SonarQubeAnalysisProperties</span>  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.sonarsource.com/msbuild/integration/2015/1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">&quot;sonar.host.url&quot;</span>&gt;</span>https://sonarcloud.io<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">&quot;sonar.login&quot;</span>&gt;</span>[my-user-token]<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SonarQubeAnalysisProperties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要安装Core 版本的Scanner</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet tool install --global dotnet-sonarscanner</span><br></pre></td></tr></table></figure>

<p>现在我们可以在命令行中使用如下命令了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet sonarscanner begin /k:&quot;project-key&quot; /o:&quot;&lt;organization&gt;&quot; /d:sonar.login=&quot;&lt;token&gt;&quot;</span><br><span class="line">dotnet build &lt;path to solution.sln&gt;</span><br><span class="line">dotnet sonarscanner end /d:sonar.login=&quot;&lt;token&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>例子如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">dotnet sonarscanner begin /k:<span class="string">&quot;ny&quot;</span> /d:sonar.host.url=<span class="string">&quot;http://192.168.1.1:9000&quot;</span> /d:sonar.login=<span class="string">&quot;47cf0aaaaaaaaaaaaaaaac057ce8a&quot;</span></span><br><span class="line">dotnet build </span><br><span class="line">dotnet sonarscanner end /d:sonar.login=<span class="string">&quot;47cf041ecaaaaaaaaa3938ac057ce8a&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><h4 id="No-quality-profiles-have-been-found"><a href="#No-quality-profiles-have-been-found" class="headerlink" title="No quality profiles have been found"></a>No quality profiles have been found</h4><p>遇到No quality profiles have been found, you probably don’t have any language plugin installed.问题</p>
<p>顾名思义是缺少了对应语言的插件</p>
<p>依然和汉化一样在市场中下载</p>
<p>通过 http://{部署ip}:9000/api/plugins/installed 可以快速查看已安装的插件</p>
]]></content>
      <categories>
        <category>Sonarqube</category>
      </categories>
      <tags>
        <tag>Sonarqube</tag>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
</search>
